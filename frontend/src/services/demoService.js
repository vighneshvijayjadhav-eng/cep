// Demo Payment Service - Simulates payment flow for demonstration
import config from '../config/config';

// Demo data storage (in real app, this would be in backend/database)
let demoTransactions = [];
let demoOrderId = 1000;

// Simulate API delay
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Generate demo order ID
const generateOrderId = () => `order_demo_${demoOrderId++}_${Date.now()}`;

// Generate demo payment ID
const generatePaymentId = () => `pay_demo_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

// Generate demo signature (in real app, this is generated by Razorpay)
const generateDemoSignature = (orderId, paymentId) => {
  return `demo_signature_${orderId}_${paymentId}`.replace(/[^a-zA-Z0-9]/g, '');
};

// Demo create maintenance order
export const createMaintenanceOrderDemo = async (paymentData) => {
  await delay(1000); // Simulate API delay
  
  const orderId = generateOrderId();
  const receipt = `${paymentData.society_name.replace(/\s+/g, '_').toUpperCase()}_${paymentData.flat_number}_${Date.now()}`;
  
  const orderData = {
    id: orderId,
    amount: paymentData.amount * 100, // Convert to paise
    currency: config.RAZORPAY.CURRENCY,
    receipt,
    status: 'created',
    bill_details: {
      society_name: paymentData.society_name,
      flat_number: paymentData.flat_number,
      member_name: paymentData.member_name,
      maintenance_type: paymentData.maintenance_type,
      payment_period: paymentData.payment_period,
      maintenance_amount: paymentData.amount,
      receipt_id: receipt,
      due_date: paymentData.due_date || null
    }
  };
  
  // Store demo transaction
  const transaction = {
    order_id: orderId,
    amount: paymentData.amount,
    currency: config.RAZORPAY.CURRENCY,
    receipt,
    society_name: paymentData.society_name,
    flat_number: paymentData.flat_number,
    wing: paymentData.wing,
    floor: paymentData.floor,
    member_name: paymentData.member_name,
    member_phone: paymentData.member_phone,
    member_email: paymentData.member_email,
    maintenance_type: paymentData.maintenance_type,
    payment_period: paymentData.payment_period,
    due_date: paymentData.due_date,
    notes: paymentData.notes,
    status: 'created',
    createdAt: new Date().toISOString()
  };
  
  demoTransactions.push(transaction);
  
  return orderData;
};

// Demo payment verification
export const verifyPaymentDemo = async (verificationData) => {
  await delay(800); // Simulate API delay
  
  // Find the transaction
  const transaction = demoTransactions.find(t => t.order_id === verificationData.order_id);
  if (!transaction) {
    throw new Error('Transaction not found');
  }
  
  // Update transaction status
  transaction.status = 'paid';
  transaction.payment_id = verificationData.payment_id;
  transaction.paidAt = new Date().toISOString();
  transaction.payment_method = 'razorpay';
  
  return {
    verified: true,
    transaction_details: {
      society_name: transaction.society_name,
      flat_number: transaction.flat_number,
      member_name: transaction.member_name,
      maintenance_type: transaction.maintenance_type,
      payment_period: transaction.payment_period,
      amount: transaction.amount,
      paid_at: transaction.paidAt,
      receipt_id: transaction.receipt
    }
  };
};

// Demo payment history
export const getPaymentHistoryDemo = async (queryParams = '') => {
  await delay(600); // Simulate API delay
  
  let filteredTransactions = [...demoTransactions];
  
  // Parse query parameters
  const params = new URLSearchParams(queryParams);
  const societyName = params.get('society_name');
  const flatNumber = params.get('flat_number');
  const status = params.get('status');
  const maintenanceType = params.get('maintenance_type');
  const page = parseInt(params.get('page')) || 1;
  const limit = parseInt(params.get('limit')) || 10;
  
  // Apply filters
  if (societyName) {
    filteredTransactions = filteredTransactions.filter(t => 
      t.society_name.toLowerCase().includes(societyName.toLowerCase())
    );
  }
  if (flatNumber) {
    filteredTransactions = filteredTransactions.filter(t => t.flat_number === flatNumber);
  }
  if (status) {
    filteredTransactions = filteredTransactions.filter(t => t.status === status);
  }
  if (maintenanceType) {
    filteredTransactions = filteredTransactions.filter(t => t.maintenance_type === maintenanceType);
  }
  
  // Sort by date (newest first)
  filteredTransactions.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
  
  // Pagination
  const total = filteredTransactions.length;
  const startIndex = (page - 1) * limit;
  const endIndex = startIndex + limit;
  const paginatedTransactions = filteredTransactions.slice(startIndex, endIndex);
  
  return {
    transactions: paginatedTransactions,
    pagination: {
      total,
      page,
      limit,
      total_pages: Math.ceil(total / limit)
    }
  };
};

// Demo payment receipt
export const getPaymentReceiptDemo = async (orderId) => {
  await delay(500); // Simulate API delay
  
  const transaction = demoTransactions.find(t => t.order_id === orderId);
  if (!transaction) {
    throw new Error('Transaction not found');
  }
  
  return {
    receipt_id: transaction.receipt,
    order_id: transaction.order_id,
    payment_id: transaction.payment_id,
    society_details: {
      society_name: transaction.society_name,
      flat_number: transaction.flat_number,
      wing: transaction.wing,
      floor: transaction.floor
    },
    member_details: {
      name: transaction.member_name,
      phone: transaction.member_phone,
      email: transaction.member_email
    },
    payment_details: {
      maintenance_type: transaction.maintenance_type,
      payment_period: transaction.payment_period,
      due_date: transaction.due_date,
      paid_at: transaction.paidAt,
      status: transaction.status,
      payment_method: transaction.payment_method
    },
    maintenance_bill: {
      maintenance_amount: transaction.amount,
      description: `${transaction.maintenance_type} maintenance for ${transaction.payment_period}`
    },
    notes: transaction.notes,
    created_at: transaction.createdAt
  };
};

// Demo email service (simulates sending receipt via email)
export const sendReceiptEmailDemo = async (emailData) => {
  await delay(1500); // Simulate email sending delay
  
  console.log('ðŸ“§ Demo Email Sent Successfully!');
  console.log('To:', emailData.to);
  console.log('Subject:', emailData.subject);
  console.log('Receipt ID:', emailData.receiptId);
  
  return {
    success: true,
    message: 'Receipt sent successfully to email',
    emailId: `email_demo_${Date.now()}`
  };
};

// Create demo data for demonstration
export const createDemoData = () => {
  const demoData = [
    {
      society_name: 'Green Valley Apartments',
      flat_number: 'A-101',
      member_name: 'John Smith',
      member_phone: '9876543210',
      member_email: 'john.smith@email.com',
      maintenance_type: 'monthly',
      payment_period: 'September 2025',
      amount: 5000,
      wing: 'A',
      floor: '1',
      notes: 'Paid on time'
    },
    {
      society_name: 'Sunset Residency',
      flat_number: 'B-205',
      member_name: 'Priya Sharma',
      member_phone: '9123456789',
      member_email: 'priya.sharma@email.com',
      maintenance_type: 'monthly',
      payment_period: 'August 2025',
      amount: 4500,
      wing: 'B',
      floor: '2',
      notes: 'Regular payment'
    },
    {
      society_name: 'Royal Gardens',
      flat_number: 'C-303',
      member_name: 'Raj Patel',
      member_phone: '9998887776',
      member_email: 'raj.patel@email.com',
      maintenance_type: 'quarterly',
      payment_period: 'Q3 2025',
      amount: 12000,
      wing: 'C',
      floor: '3',
      notes: 'Quarterly maintenance'
    }
  ];
  
  // Create demo transactions
  demoData.forEach(async (data, index) => {
    try {
      const orderData = await createMaintenanceOrderDemo(data);
      
      // Simulate some payments as completed
      if (index < 2) {
        const paymentId = generatePaymentId();
        const signature = generateDemoSignature(orderData.id, paymentId);
        
        await verifyPaymentDemo({
          order_id: orderData.id,
          payment_id: paymentId,
          signature
        });
      }
    } catch (error) {
      console.error('Error creating demo data:', error);
    }
  });
  
  console.log('ðŸŽ¯ Demo data created successfully!');
};

// Initialize demo data when in demo mode
if (config.DEMO_MODE) {
  createDemoData();
}

// Default export for convenience
export default {
  createOrder: createMaintenanceOrderDemo,
  verifyPayment: verifyPaymentDemo,
  sendReceiptEmail: sendReceiptEmailDemo,
  getPaymentHistory: getPaymentHistoryDemo,
  getPaymentReceipt: getPaymentReceiptDemo,
  createDemoData
};